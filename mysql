-- CREATE DATABASE record_company;
USE record_company;

# Create table
CREATE TABLE bands (
	id INT NOT NULL AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    PRIMARY KEY (id)
);

# Adding a column
-- ALTER TABLE bands ADD name VARCHAR(250);PRIMARY

# Adding foreign key
CREATE TABLE albums (
	id INT NOT NULL AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    release_year INT,
    band_id INT NOT NULL,
	PRIMARY KEY (id),
    FOREIGN KEY (band_id) REFERENCES bands (id)
);

# Insert command
INSERT INTO bands (name) VALUES ("Iron Maiden");
# Making multiple inserts
INSERT INTO bands (name)
VALUES ("DUECE"), ("AVENGE SEVENFOLD"), ("ANKOR");

# Limit the results fetched 
SELECT * FROM bands LIMIT 2; 

# Using aliases
SELECT id as "ID", name as "Band Name" FROM bands;

# Oreder by name
SELECT * FROM bands ORDER BY name;

INSERT INTO albums (name, release_year, band_id)
VALUES ("The number of the beasts", 1985, 1),
("Power Slave", 1984, 1),
("Nightmare", 2018, 2),
("Nightmare", 2010, 3),
("Testing", NULL, 3);

# Get disntict results
SELECT DISTINCT name FROM albums;

# Update field
UPDATE albums SET release_year=1982 WHERE id=1;

# Wildcard
SELECT * FROM albums WHERE name LIKE "%er%";

# IS NULL
SELECT * FROM albums WHERE release_year IS NULL;

# Delete 
DELETE FROM albums WHERE id=5;

########################################
## JOINS
# Inner Join done by default
# Values 
SELECT * FROM bands JOIN albums ON bands.id=albums.band_id;
SELECT * FROM bands t1 JOIN albums t2 ON t1.id=t2.band_id;
-- 1	Iron Maiden			1	The number of the beasts	1982
-- 1	Iron Maiden			2	Power Slave					1984
-- 2	DUECE				3	Nightmare					2018
-- 3	AVENGE SEVENFOLD	4	Nightmare					2010
# Returns the results only if there is a match on both the sides
# Anchor was not listed as it did not have any albums

# Left join
# Returns everything on the left side
SELECT * FROM bands LEFT JOIN albums ON bands.id=albums.band_id;
-- Iron Maiden			1	The number of the beasts	1982	1
-- Iron Maiden			2	Power Slave					1984	1
-- DUECE				3	Nightmare					2018	2
-- AVENGE SEVENFOLD	4	Nightmare						2010	3
-- ANKOR			
# Ankor has no albums even then it is listed in the results

# Right join
-- SELECT * FROM bands RIGHT JOIN albums on bands.id=albums.band_id;

SELECT AVG(release_year) FROM albums;


###########################################
# GROUP BY AND AGGREGATES
SELECT name, COUNT(band_id) FROM albums GROUP BY band_id;

# Count the no. of albums of each band
SELECT b.name as band_name, COUNT(a.id) AS num_albums
FROM bands AS b
LEFT JOIN albums AS a ON b.id=a.band_id
GROUP BY b.id;

SELECT bands.name, COUNT(albums.id)
FROM bands
LEFT JOIN albums ON bands.id=albums.band_id
GROUP BY bands.id;
# The GROUP BY clause is a SQL command that is used to group rows that have the same values. 
# NOTE: HAVING is similar to WHERE but it happens after the GROUP BY

# Get the band which has more than 1 album
SELECT bands.name, COUNT(albums.id) as num_albums FROM bands
LEFT JOIN albums ON bands.id=albums.band_id
GROUP BY albums.band_id
HAVING num_albums>1;

# Bands which have no albums
# If you want to add WHERE clause you must do it before the GROURP BY
SELECT bands.name, COUNT(albums.id) as num_albums FROM bands
LEFT JOIN albums on bands.id=albums.band_id
-- WHERE bands.name='Ankor'
GROUP BY albums.band_id
HAVING num_albums=0;

SELECT * FROM albums;


CREATE TABLE songs(
	id INT NOT NULL AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    length FLOAT NOT NULL,
    album_id INT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (album_id) REFERENCES albums(id)
);

# Delete with sage update mode
-- DELETE FROM albums WHERE id <> 0;
-- DELETE FROM bands WHERE id <> 0;


# Count the songs in each album
SELECT albums.id,albums.name, COUNT(songs.id) as songs_num
FROM albums
LEFT JOIN songs on albums.id=songs.album_id
GROUP BY songs.album_id;

# Count songs with same name
SELECT name as 'Song Name',COUNT(name) FROM songs GROUP BY name;

# Select oldest album
SELECT * FROM albums WHERE release_year IS NOT NULL
ORDER BY release_year
# ORDER BY will sort the records by year in ascending order
# So the oldest one will be on the top 
LIMIT 1;

# Select all bands that have an album
SELECT DISTINCT bands.name AS 'Band Name'
FROM bands 
JOIN albums on bands.id=albums.band_id;

# Bands with 0 albums
SELECT bands.name AS 'Band Name'
FROM bands
LEFT JOIN albums ON bands.id=albums.band_id
GROUP BY albums.band_id
HAVING COUNT(albums.id)=0;

# Get the longest album
SELECT albums.name AS Name, albums.release_year AS 'Release Year',
SUM(songs.length) AS Duration
FROM albums
JOIN songs ON albums.id=songs.album_id
GROUP BY songs.album_id
ORDER BY Duration DESC
LIMIT 1;

# Update the album with no release year
SELECT * FROM albums WHERE release_year IS NULL;
UPDATE albums SET release_year = 1996 WHERE id=4;

# Insert a fav band and an album
INSERT INTO bands (name) VALUES ('Haken');
# Get the id of the band we just created
SELECT id, name FROM bands ORDER BY id DESC LIMIT 1;
# Insert a new album for band id 8
INSERT INTO albums (name, release_year, band_id) VALUES ('Vector', 2018, 8);
# Check the result
SELECT * FROM albums WHERE band_id=8;

# Delete the album and band you created the last time
# First delete the album and then the band
# Deleting the band first will throw an error
DELETE FROM albums WHERE id=19;
DELETE FROM bands WHERE id=8;

# Get average length of all the songs
SELECT AVG(length) AS 'Average Song Duration' FROM songs;

# Longest song of each album
SELECT albums.name AS 'Album', albums.release_year AS 'Year',
MAX(songs.length) AS 'Duration' FROM albums
JOIN songs ON albums.id=songs.album_id
GROUP BY songs.album_id;

# Get no. of songs of each album
# Band -> Album -> Song
SELECT bands.name AS 'Band', COUNT(songs.id) AS 'No. of Songs'
FROM bands
JOIN  albums ON bands.id=albums.band_id
JOIN songs ON albums.id=songs.album_id
GROUP BY albums.band_id;
